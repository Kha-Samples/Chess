Object subclass: #Chessboard	instanceVariableNames: 'white black board whiteplayer blackplayer '	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 00:56'!at: aPosition	^board at: aPosition x at: aPosition y! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 01:29'!at: aPosition put: aChessman	|old|	old_self at: aPosition.	board at: aPosition x at: aPosition y put: aChessman.	^old! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:52'!create: aChessman at: x at: y in: color	"Hilfsfunktion zur Erstellung der Schachfiguren"	|position chessman|	position_Position newAt: x And: y.	chessman_aChessman newAt: position In: color On: self.	board at: x at: y put: chessman.	(color isWhite) ifTrue: [white addLast: chessman]	ifFalse: [black addLast: chessman].! !!Chessboard methodsFor: 'as yet unclassified' stamp: '  12/7/2003 20:45'!draw	Transcript cr; show: '  12345678'.	1 to: 8 do: [:y|		Transcript cr; show: y; show: ' '.		1 to: 8 do: [:x|			((board at: x at: y) = nil) ifTrue: [ 				((x \\ 2) = (y \\ 2)) ifTrue: [					Transcript show: '||||'.				] ifFalse: [					Transcript show: ' '.				] 			] ifFalse: [				Transcript show: (board at: x at: y) char			].		].	].	Transcript cr! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:25'!getChessmenIn: aColour	(aColour isWhite) ifTrue: [^white].	^black! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:25'!getChessmenNotIn: aColour	(aColour isWhite) ifTrue: [^black].	^white! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:52'!hasDifferentColorThan: aColour At: aPosition	"wenn an der Position niemand steht oder die Position au§erhalb des Brettes ist, wird auch false zurŸckgegeben"	(aPosition x > 8 or: [aPosition x <  1] or: [aPosition y > 8] or: [aPosition y < 1]) ifTrue: [^false].	((board at: (aPosition x) at: (aPosition y)) = nil) ifTrue: [^false].	(((board at: (aPosition x) at: (aPosition y)) color) isDifferent: aColour) ifTrue: [^true].	^false! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:50'!hasWon: aColour	"durchsucht die Figurenlisten nach dem Kšnig"	|kingDead|	kingDead_true.	(self getChessmenNotIn: aColour) do: [:man|		(man isKing) ifTrue: [kingDead_false].	].	^kingDead! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 04:01'!initialize	"Initialisiert das Schachbrett und stellt insbesondere die Figuren auf das Brett"	|b w|	w_White new.	b_Black new.	white_OrderedCollection new.	black_OrderedCollection new.	board_Array2D width: 8 height: 8.	whiteplayer_HumanChessplayer newWith: self In: w.	blackplayer_ComputerChessplayer newWith: self In: b.	self create: Rook at: 1 at: 8 in: w.	self create: Knight at: 2 at: 8 in: w.	self create: Bishop at: 3 at: 8 in: w.	self create: Queen at: 4 at: 8 in: w.	self create: King at: 5 at: 8 in: w.	self create: Bishop at: 6 at: 8 in: w.	self create: Knight at: 7 at: 8 in: w.	self create: Rook at: 8 at: 8 in: w.	1 to: 8 do: [:i| self create: Pawn at: i at: 7 in: w].	self create: Rook at: 1 at: 1 in: b.	self create: Knight at: 2 at: 1 in: b.	self create: Bishop at: 3 at: 1 in: b.	self create: Queen at: 4 at: 1 in: b.	self create: King at: 5 at: 1 in: b.	self create: Bishop at: 6 at: 1 in: b.	self create: Knight at: 7 at: 1 in: b.	self create: Rook at: 8 at: 1 in: b.	1 to: 8 do: [:i| self create: Pawn at: i at: 2 in: b]."	self create: King at: 8 at: 2 in: w.	self create: King at: 1 at: 1 in: b.	self create: Rook at: 2 at: 5 in: b.""	self create: Queen at: 4 at: 1 in: b.	self create: Rook at: 6 at: 1 in: b.	self create: King at: 7 at: 1 in: b.	self create: Pawn at: 2 at: 2 in: b.	self create: Pawn at: 4 at: 2 in: b.	self create: Pawn at: 5 at: 2 in: b.	self create: Pawn at: 6 at: 2 in: b.	self create: Pawn at: 7 at: 2 in: b.	self create: Knight at: 6 at: 3 in: b.	self create: Knight at: 7 at: 4 in: w.	self create: Knight at: 7 at: 5 in: w.	self create: Pawn at: 2 at: 7 in: w.	self create: Pawn at: 3 at: 7 in: w.	self create: Pawn at: 4 at: 7 in: w.	self create: Pawn at: 5 at: 7 in: w.	self create: Pawn at: 6 at: 7 in: w.	self create: Pawn at: 7 at: 7 in: w.	self create: Rook at: 1 at: 8 in: w.	self create: Bishop at: 3 at: 8 in: w.	self create: King at: 4 at: 8 in: w.	self create: Queen at: 5 at: 8 in: w.	self create: Bishop at: 6 at: 8 in: w.	self create: Rook at: 8 at: 8 in: w."! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:50'!isFreeAt: aPosition	"gibt auch false zurŸck, wenn eine Position au§erhalb des Brettes angesprochen wird"	(aPosition x > 8 or: [aPosition x <  1] or: [aPosition y > 8] or: [aPosition y < 1]) ifTrue: [^false].	((board at: (aPosition x) at: (aPosition y)) = nil) ifTrue: [^true].	^false! !!Chessboard methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 03:03'!play	"Spielt Schach bis einer der beiden Kšnige sich verabschiedet"	[true] whileTrue: [		whiteplayer move.		self draw.		(self hasWon: (White new)) ifTrue: [			Transcript show: 'White won'.			^White new.		].		blackplayer move.		self draw.		(self hasWon: (Black new)) ifTrue: [			Transcript show: 'Black won'.			^Black new.		].	].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Chessboard class	instanceVariableNames: ''!!Chessboard class methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 01:51'!newBoard	|board|	board_super new.	board initialize.	^board! !Object subclass: #Chessman	instanceVariableNames: 'position color chessboard killed '	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:54'!char	"fŸr die Ausgabe"	self subclassResponsibility! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 01:59'!color	^color! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 01:07'!initializeAt: aPosition In: aColor On: aChessboard	position_aPosition.	color_aColor.	chessboard_aChessboard.	killed_false.! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 01:02'!isAlive	^killed not! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:39'!isKing	^false! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:18'!kill	"killed blub."	killed_true.	^self! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 01:35'!move: aPosition	"da macht sich die Schachfigur auf zu einer neuen Position und wenn sie die Gelegenheit dazu bekommt, rŠmpelt sie dabei gleich noch jemanden um"	|remove oldman|	chessboard at: position put: nil.	oldman_chessboard at: aPosition put: self.	(oldman = nil) ifFalse: [oldman kill].	remove_Move newWith: self To: position Without: oldman.	position_aPosition.	^remove! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:56'!moves	"gibt alle mšglichen Bewegungen der Schachfigur zurŸck"	self subclassResponsibility! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 01:45'!position	^position! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 02:18'!revive	chessboard at: position put: self.	killed_false.! !!Chessman methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:56'!value	"gibt einen Wert fŸr die Heuristik zurŸck"	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Chessman class	instanceVariableNames: ''!!Chessman class methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 01:49'!newAt: aPosition In: aColor On: aChessboard	| cm |	cm _ self new.	cm initializeAt: aPosition In: aColor On: aChessboard.	^cm! !Chessman subclass: #Bishop	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Bishop methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:35'!char	(color isWhite) ifTrue: [^'b'].	^'B'! !!Bishop methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:41'!moves	"Laeufer"	|moves newposition|	moves_OrderedCollection new.	newposition_Position newAt: (position x + 1) And: (position y + 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x + 1) And: (newposition y + 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x + 1) And: (position y - 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x + 1) And: (newposition y - 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (position y + 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x - 1) And: (newposition y + 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (position y - 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x - 1) And: (newposition y - 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	^moves! !!Bishop methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 02:56'!value	^30! !Object subclass: #Chessplayer	instanceVariableNames: 'chessboard color '	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Chessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 21:51'!initializeWith: aChessboard In: aColor	chessboard_aChessboard.	color_aColor.! !!Chessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:57'!move	"fordert den Spieler freundlich dazu auf, gefŠlligst seinen nŠchsten Zug auszufŸhren"	self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Chessplayer class	instanceVariableNames: ''!!Chessplayer class methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 01:45'!newWith: aChessboard In: aColor	|chessplayer|	chessplayer_self new.	chessplayer initializeWith: aChessboard In: aColor.	^chessplayer! !Object subclass: #Colour	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Colour methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:13'!isBlack	self subclassResponsibility! !!Colour methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:15'!isDifferent	self subclassResponsibility! !!Colour methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:14'!isWhite	self subclassResponsibility! !!Colour methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 00:50'!other	self subclassResponsibility! !Colour subclass: #Black	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Black methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:15'!isBlack	^true! !!Black methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:18'!isDifferent: aColour	(aColour isWhite) ifTrue: [^true].	^false! !!Black methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:15'!isWhite	^false! !!Black methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 00:51'!other	|c|	c_White new.	^c! !Chessplayer subclass: #ComputerChessplayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!ComputerChessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 03:44'!alphaBeta: depth a: al b: beta c: aColour	|oldmove value alpha|	(depth = 0) ifTrue: [^self heuristic: aColour].	alpha_al.	(self collectMoves: aColour) do: [:move|		oldmove_move execute.		value_((self alphaBeta: (depth - 1) a: (beta negated) b: (alpha negated) c: (aColour other)) negated).		oldmove execute.		(value >= beta) ifTrue: [^beta].		(value > alpha) ifTrue: [alpha_value].	].	^alpha! !!ComputerChessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 00:52'!collectMoves: colour	"erstellt eine OrderedCollection, die alle fŸr den Spieler mšglichen ZŸge enthŠlt"	|moves|	moves_OrderedCollection new.	(chessboard getChessmenIn: colour) do: [:man|		(man isAlive) ifTrue: [			(man moves) do: [:m|				moves addLast: m			]		].	].	^moves! !!ComputerChessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 03:43'!heuristic: aColour	"ala Shannon"	|value men|	value_0.	men_chessboard getChessmenIn: aColour.	men do: [:man|		(man isAlive) ifTrue: [value_(value + man value)].	].	value_value + ((self collectMoves: aColour) size).	men_chessboard getChessmenNotIn: aColour.	men do: [:man|		(man isAlive) ifTrue: [value_(value - man value)].	].	value_value - ((self collectMoves: (aColour other)) size).	^value! !!ComputerChessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 21:24'!maxOf: aValue And: anotherValue	(aValue > anotherValue) ifTrue: [^aValue].	^anotherValue! !!ComputerChessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 21:55'!minOf: aValue And: anotherValue	(aValue < anotherValue) ifTrue: [^aValue].	^anotherValue! !!ComputerChessplayer methodsFor: 'as yet unclassified' stamp: '  12/7/2003 20:53'!move	"FŸhrt eine AlphaBeta Suche durch"	|newmax max maxmove oldm alpha|	alpha_(10000 negated).	max_(10000 negated).	(self collectMoves: color) do: [:m|		oldm_m execute.		newmax_self maxOf: ((self alphaBeta: 3 a: (10000 negated) b: (alpha negated) c: (color other)) negated) And: max.		(newmax > max) ifTrue: [maxmove_m. max_newmax].		oldm execute.		(newmax > alpha) ifTrue: [alpha_newmax].	].	(maxmove = nil) ifFalse: [maxmove execute].! !Chessplayer subclass: #HumanChessplayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!HumanChessplayer methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 16:21'!move	"versucht mittels an der Tastatur angedockter Intelligenzeinheit den optimalen Zug zu ermitteln"	|moves strmoves temp|	moves_OrderedCollection new.	(chessboard getChessmenIn: color) do: [:man|		(man isAlive) ifTrue: [			(man moves) do: [:m|				moves addLast: m			]		].	].	strmoves_OrderedCollection new.	moves do: [:move|		strmoves addLast: (move toString).	].	temp_0.	[temp = 0] whileTrue: [temp_((PopUpMenu labelArray: strmoves) startUp)].	(moves at: temp) execute.! !Chessman subclass: #King	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!King methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:35'!char	(color isWhite) ifTrue: [^'k'].	^'K'! !!King methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 16:28'!isKing	killed ifTrue: [^false].	^true! !!King methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:42'!moves	|moves newposition|	moves_OrderedCollection new.	newposition_Position newAt: (position x) And: (position y + 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 1) And: (position y + 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 1) And: (position y).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 1) And: (position y - 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x) And: (position y - 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x - 1) And: (position y - 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x - 1) And: (position y).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x - 1) And: (position y + 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	^moves! !!King methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 03:53'!value	^5000! !Chessman subclass: #Knight	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Knight methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:35'!char	(color isWhite) ifTrue: [^'n'].	^'N'! !!Knight methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:42'!moves	"Springer"	|moves newposition|	moves_OrderedCollection new.	newposition_Position newAt: (position x - 1) And: (position y + 2).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 1) And: (position y + 2).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 2) And: (position y + 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 2) And: (position y - 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x + 1) And: (position y - 2).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x - 1) And: (position y - 2).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x - 2) And: (position y - 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	newposition_Position newAt: (position x - 2) And: (position y + 1).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]	ifFalse: [(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)]].	^moves! !!Knight methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 02:56'!value	^30! !Object subclass: #Move	instanceVariableNames: 'chessman position killed '	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Move methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 01:39'!execute	|remove|	remove_chessman move: position.	(killed = nil) ifFalse: [killed revive].	^remove! !!Move methodsFor: 'as yet unclassified' stamp: 'ROB 11/23/2003 16:39'!initializeWith: aChessman To: aPosition	chessman_aChessman.	position_aPosition.! !!Move methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 00:51'!initializeWith: aChessman To: aPosition Without: aKilled	chessman_aChessman.	position_aPosition.	killed_aKilled.! !!Move methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 01:51'!toString	"benštigt der HumanPlayer fŸr die ListBox"	^(chessman position toString) , ' to ' , (position toString).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Move class	instanceVariableNames: ''!!Move class methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 02:07'!newWith: aChessman To: aPosition	|move|	move_self new.	move initializeWith: aChessman To: aPosition.	^move! !!Move class methodsFor: 'as yet unclassified' stamp: 'ROB 11/25/2003 02:06'!newWith: aChessman To: aPosition Without: aKilled	|move|	move_self new.	move initializeWith: aChessman To: aPosition Without: aKilled.	^move! !Chessman subclass: #Pawn	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Pawn methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:35'!char	(color isWhite) ifTrue: [^'p'].	^'P'! !!Pawn methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:42'!moves	"Pawn"	|moves newy newposition|	moves_OrderedCollection new.	(color isWhite) ifTrue: [newy_(position y - 1)]	ifFalse: [newy_(position y + 1)].	newposition_Position newAt: (position x) And: (newy).	(chessboard isFreeAt: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x + 1) And: (newy).	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (newy).	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	^moves! !!Pawn methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 02:56'!value	^10! !Object subclass: #Position	instanceVariableNames: 'x y '	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Position methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 00:49'!initializeAt: aX And: aY	x_aX.	y_aY.! !!Position methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 01:56'!toString	|string|	string_String new.	string_(string , (x printString) , '-' , (y printString)).	^string! !!Position methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 01:57'!x	^x! !!Position methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 01:57'!y	^y! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Position class	instanceVariableNames: ''!!Position class methodsFor: 'as yet unclassified' stamp: 'ROB 11/24/2003 00:50'!newAt: aX And: aY	|position|	position_Position new.	position initializeAt: aX And: aY.	^position! !Chessman subclass: #Queen	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Queen methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:36'!char	(color isWhite) ifTrue: [^'q'].	^'Q'! !!Queen methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:43'!moves	|moves newposition|	moves_OrderedCollection new.	newposition_Position newAt: (position x + 1) And: (position y + 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x + 1) And: (newposition y + 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x + 1) And: (position y - 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x + 1) And: (newposition y - 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (position y + 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x - 1) And: (newposition y + 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (position y - 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x - 1) And: (newposition y - 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x + 1) And: (position y).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x + 1) And: (newposition y).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (position y).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x - 1) And: (newposition y).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x) And: (position y + 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x) And: (newposition y + 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x) And: (position y - 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x) And: (newposition y - 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	^moves! !!Queen methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 02:56'!value	^90! !Chessman subclass: #Rook	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!Rook methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:36'!char	(color isWhite) ifTrue: [^'r'].	^'R'! !!Rook methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 23:43'!moves	"Turm"	|moves newposition|	moves_OrderedCollection new.	newposition_Position newAt: (position x + 1) And: (position y).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x + 1) And: (newposition y).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x - 1) And: (position y).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x - 1) And: (newposition y).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x) And: (position y + 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x) And: (newposition y + 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	newposition_Position newAt: (position x) And: (position y - 1).	[chessboard isFreeAt: newposition] whileTrue: [		moves addLast: (Move newWith: self To: newposition).		newposition_Position newAt: (newposition x) And: (newposition y - 1).	].	(chessboard hasDifferentColorThan: color At: newposition) ifTrue: [moves addLast: (Move newWith: self To: newposition)].	^moves! !!Rook methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 02:56'!value	^50! !Colour subclass: #White	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Uebung4'!!White methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:18'!isBlack	^false! !!White methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:18'!isDifferent: aColour	(aColour isBlack) ifTrue: [^true].	^false! !!White methodsFor: 'as yet unclassified' stamp: 'ROB 12/6/2003 02:17'!isWhite	^true! !!White methodsFor: 'as yet unclassified' stamp: 'ROB 12/7/2003 00:51'!other	|c|	c_Black new.	^c! !